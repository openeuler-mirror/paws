/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "gitee.com/openeuler/paws/scheduler/apis/scheduling/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// UsageTemplateLister helps list UsageTemplates.
// All objects returned here must be treated as read-only.
type UsageTemplateLister interface {
	// List lists all UsageTemplates in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UsageTemplate, err error)
	// UsageTemplates returns an object that can list and get UsageTemplates.
	UsageTemplates(namespace string) UsageTemplateNamespaceLister
	UsageTemplateListerExpansion
}

// usageTemplateLister implements the UsageTemplateLister interface.
type usageTemplateLister struct {
	indexer cache.Indexer
}

// NewUsageTemplateLister returns a new UsageTemplateLister.
func NewUsageTemplateLister(indexer cache.Indexer) UsageTemplateLister {
	return &usageTemplateLister{indexer: indexer}
}

// List lists all UsageTemplates in the indexer.
func (s *usageTemplateLister) List(selector labels.Selector) (ret []*v1alpha1.UsageTemplate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UsageTemplate))
	})
	return ret, err
}

// UsageTemplates returns an object that can list and get UsageTemplates.
func (s *usageTemplateLister) UsageTemplates(namespace string) UsageTemplateNamespaceLister {
	return usageTemplateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// UsageTemplateNamespaceLister helps list and get UsageTemplates.
// All objects returned here must be treated as read-only.
type UsageTemplateNamespaceLister interface {
	// List lists all UsageTemplates in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UsageTemplate, err error)
	// Get retrieves the UsageTemplate from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.UsageTemplate, error)
	UsageTemplateNamespaceListerExpansion
}

// usageTemplateNamespaceLister implements the UsageTemplateNamespaceLister
// interface.
type usageTemplateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all UsageTemplates in the indexer for a given namespace.
func (s usageTemplateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.UsageTemplate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UsageTemplate))
	})
	return ret, err
}

// Get retrieves the UsageTemplate from the indexer for a given namespace and name.
func (s usageTemplateNamespaceLister) Get(name string) (*v1alpha1.UsageTemplate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("usagetemplate"), name)
	}
	return obj.(*v1alpha1.UsageTemplate), nil
}
